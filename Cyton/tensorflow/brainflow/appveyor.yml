image:
- Visual Studio 2017

stack: python 3

environment:
  PY_DIR: C:\Python36-x64
  AWS_ACCESS_KEY_ID:
    secure: 41Lh3mnlU+lVcr5eX3bTgmsKqcebacVgDOww7zb0r4E=
  AWS_SECRET_ACCESS_KEY:
    secure: jeVYQ02OTywaENrIcWvoZg+YzGnhiluCDes/kaJE4NeVIZqjlipFt5yXxCct9S5w
  PYPI_PASSWORD:
    secure: iwHCe7zJP1fu+Jv03MC+ArVwcbANHouo7xvXkJvqXPQ=
  GITHUB_TOKEN:
    secure: LrDw5C81iZpUPzP6fbzej6tzZvu59lQSXHPsYvx9DmG+LQXOewUdh4c460Jn1GC/

clone_depth: 3

build: off

init:
  - cmd: set PATH=%PY_DIR%;%PY_DIR%\Scripts;C:\Program Files\Java\jdk1.8.0\bin;%APPVEYOR_BUILD_FOLDER%\installed64\lib;%APPVEYOR_BUILD_FOLDER%\installed32\lib;%PATH%
  - cmd: set CNC_INSTALL_CNCA0_CNCB0_PORTS="YES"
  - cmd: set JAVA_HOME=C:\Program Files\Java\jdk1.8.0
  - cmd: set BRAINFLOW_VERSION=%APPVEYOR_REPO_TAG_NAME%

install:
  # install emulator for cyton
  - pip install %APPVEYOR_BUILD_FOLDER%\emulator\
  - cd %APPVEYOR_BUILD_FOLDER% && %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\com0com\certmgr.exe  /add %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\com0com\com0com.cer /s /r localMachine root
  - cd %APPVEYOR_BUILD_FOLDER% && %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\com0com\certmgr.exe /add %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\com0com\com0com.cer /s /r localMachine trustedpublisher
  # build mock for ganglion
  - mkdir %APPVEYOR_BUILD_FOLDER%\GanglionBLEAPI\Mock\build
  - cd  %APPVEYOR_BUILD_FOLDER%\GanglionBLEAPI\Mock\build
  - cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_SYSTEM_VERSION=8.1 ..
  - cmake --build . --config Release > ganglion_mock_build64_stdout.txt
  # compile brainflow for 32 and 64
  - mkdir %APPVEYOR_BUILD_FOLDER%\build32 && cd %APPVEYOR_BUILD_FOLDER%\build32 && cmake -G "Visual Studio 15 2017" -DCMAKE_SYSTEM_VERSION=8.1 -DCMAKE_INSTALL_PREFIX=..\installed32\ .. && cmake --build . --target install --config Release > brainflow_build32_stdout.txt
  - mkdir %APPVEYOR_BUILD_FOLDER%\build64 && cd %APPVEYOR_BUILD_FOLDER%\build64 && cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_SYSTEM_VERSION=8.1 -DCMAKE_INSTALL_PREFIX=..\installed64\ .. && cmake --build . --target install --config Release > brainflow_build64_stdout.txt
  # store real ganglion libs libraries in compiled folder
  - cp %APPVEYOR_BUILD_FOLDER%\installed64\lib\GanglionLibNative64.dll  %APPVEYOR_BUILD_FOLDER%\compiled\GanglionLibNative64.dll
  - cp %APPVEYOR_BUILD_FOLDER%\installed32\lib\GanglionLibNative32.dll  %APPVEYOR_BUILD_FOLDER%\compiled\GanglionLibNative32.dll
  # replace real ganglion libs by mocks
  - cp %APPVEYOR_BUILD_FOLDER%\GanglionBLEAPI\Mock\compiled\Release\GanglionLibNative64.dll %APPVEYOR_BUILD_FOLDER%\python-package\brainflow\lib\GanglionLibNative64.dll
  - cp %APPVEYOR_BUILD_FOLDER%\GanglionBLEAPI\Mock\compiled\Release\GanglionLibNative64.dll %APPVEYOR_BUILD_FOLDER%\installed64\lib\GanglionLibNative64.dll
  - cp %APPVEYOR_BUILD_FOLDER%\GanglionBLEAPI\Mock\compiled\Release\GanglionLibNative64.dll %APPVEYOR_BUILD_FOLDER%\java-package\brainflow\src\main\resources\GanglionLibNative64.dll
  # install python package
  - pip install %APPVEYOR_BUILD_FOLDER%\python-package\ 
  # build cpp
  - mkdir %APPVEYOR_BUILD_FOLDER%\tests\cpp\build && cd %APPVEYOR_BUILD_FOLDER%\tests\cpp\build && cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_SYSTEM_VERSION=8.1 -DCMAKE_PREFIX_PATH=%APPVEYOR_BUILD_FOLDER%\installed64\ .. && cmake --build . --config Release > cpp_test_build64_stdout.txt
  - mkdir %APPVEYOR_BUILD_FOLDER%\tests\cpp\build32 && cd %APPVEYOR_BUILD_FOLDER%\tests\cpp\build32 && cmake -G "Visual Studio 15 2017" -DCMAKE_SYSTEM_VERSION=8.1 -DCMAKE_PREFIX_PATH=%APPVEYOR_BUILD_FOLDER%\installed32\ .. && cmake --build . --config Release > cpp_test_build32_stdout.txt
  # mvn package for java
  - cd %APPVEYOR_BUILD_FOLDER%\java-package\brainflow && mvn package > maven_package_stdout.txt && cd ..\..\tests\java && javac -classpath ..\..\java-package\brainflow\target\brainflow-jar-with-dependencies.jar BrainFlowTest.java

test_script:
  # tests for cyton
  - python %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\cyton_windows.py python %APPVEYOR_BUILD_FOLDER%\tests\python\brainflow_get_data.py --log --board 0 --port
  - python %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\cyton_windows.py %APPVEYOR_BUILD_FOLDER%\tests\cpp\build\Release\test_get_data.exe 0
  - python %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\cyton_windows.py %APPVEYOR_BUILD_FOLDER%\tests\cpp\build32\Release\test_get_data.exe 0
  # tests for ganglion
  - python %APPVEYOR_BUILD_FOLDER%\tests\python\brainflow_get_data.py --log --board 1 --port e6:73:73:18:09:b1
  - echo "stub text to dont start command with special character" && %APPVEYOR_BUILD_FOLDER%\tests\cpp\build\Release\test_get_data.exe 1 e6:73:73:18:09:b1
  # tests for synthetic
  - python %APPVEYOR_BUILD_FOLDER%\tests\python\brainflow_get_data.py --log --board -1 --port "smth"
  - python %APPVEYOR_BUILD_FOLDER%\tests\python\brainflow_multiboard_get_data.py --log --first-board -1 --first-port "smth1" --second-board -1 --second-port "smth2"
  - echo "stub text to dont start command with special character" && %APPVEYOR_BUILD_FOLDER%\tests\cpp\build\Release\test_get_data.exe -1 "smth"
  # tests for cyton daisy
  - python %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\cyton_windows.py python %APPVEYOR_BUILD_FOLDER%\tests\python\brainflow_get_data.py --log --board 2 --port
  - python %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\cyton_windows.py %APPVEYOR_BUILD_FOLDER%\tests\cpp\build\Release\test_get_data.exe 2
    # tests for novaxr
  - python %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\novaxr_udp.py python %APPVEYOR_BUILD_FOLDER%\tests\python\brainflow_get_data.py --board 3 --port 127.0.0.1
  - python %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\novaxr_udp.py %APPVEYOR_BUILD_FOLDER%\tests\cpp\build\Release\test_get_data.exe 3 127.0.0.1
  - python %APPVEYOR_BUILD_FOLDER%\emulator\brainflow_emulator\novaxr_udp.py %APPVEYOR_BUILD_FOLDER%\tests\cpp\build32\Release\test_get_data.exe 3 127.0.0.1

# replace mocked libraries by real libs
after_test:
  - cp %APPVEYOR_BUILD_FOLDER%\compiled\GanglionLibNative64.dll %APPVEYOR_BUILD_FOLDER%\python-package\brainflow\lib\GanglionLibNative64.dll
  - cp %APPVEYOR_BUILD_FOLDER%\compiled\GanglionLibNative64.dll %APPVEYOR_BUILD_FOLDER%\java-package\brainflow\src\main\resources\GanglionLibNative64.dll

deploy_script:
  - python -m pip install wheel > wheel_install.txt
  - python -m pip install twine > twine_install.txt
  - python -m pip install awscli > awscli_install.txt
  # upload to S3 in all cases, we will always be able to download libs
  - aws s3 cp %APPVEYOR_BUILD_FOLDER%\installed32\inc\ s3://brainflow-artifacts/%APPVEYOR_REPO_COMMIT%/inc --recursive
  - aws s3 cp %APPVEYOR_BUILD_FOLDER%\installed32\lib\ s3://brainflow-artifacts/%APPVEYOR_REPO_COMMIT%/lib32 --recursive
  - aws s3 cp %APPVEYOR_BUILD_FOLDER%\installed64\lib\ s3://brainflow-artifacts/%APPVEYOR_REPO_COMMIT%/lib64 --recursive
  # download files from travis using S3 create package and publish it
  - ps: >-
      If ($env:APPVEYOR_REPO_TAG -eq "true" -And $env:APPVEYOR_REPO_BRANCH -eq "master") {
        # wait 30 minutes or until mac and linux binaries appear in s3
        $lin = $false;
        $osx = $false;
        for ($i=0; $i -lt 30; $i++) {
          aws s3 ls s3://brainflow-artifacts/$env:APPVEYOR_REPO_COMMIT/linux_success;
          $lin = $?;
          aws s3 ls s3://brainflow-artifacts/$env:APPVEYOR_REPO_COMMIT/osx_success;
          $osx = $?
          if($lin -and $osx) {break}
          Start-Sleep -s 60;
          echo "not found"
        }
        If ($lin -and $osx) {
          write-output "Binaries found - running deployment"
          New-Item $env:APPVEYOR_BUILD_FOLDER\linux -itemtype directory
          New-Item $env:APPVEYOR_BUILD_FOLDER\osx -itemtype directory
          aws s3 cp s3://brainflow-artifacts/$env:APPVEYOR_REPO_COMMIT/linux/ $env:APPVEYOR_BUILD_FOLDER\linux\ --recursive
          aws s3 cp s3://brainflow-artifacts/$env:APPVEYOR_REPO_COMMIT/osx/ $env:APPVEYOR_BUILD_FOLDER\osx\ --recursive
          Copy-Item "$env:APPVEYOR_BUILD_FOLDER\linux\*" -Destination "$env:APPVEYOR_BUILD_FOLDER\python-package\brainflow\lib" -Recurse
          Copy-Item "$env:APPVEYOR_BUILD_FOLDER\osx\*" -Destination "$env:APPVEYOR_BUILD_FOLDER\python-package\brainflow\lib" -Recurse
          ls $env:APPVEYOR_BUILD_FOLDER\python-package\brainflow\lib
          cd $env:APPVEYOR_BUILD_FOLDER\python-package
          python setup.py sdist bdist_wheel
          twine upload --skip-existing dist/*.whl --user OpenBCI --password $env:PYPI_PASSWORD
          cd $env:APPVEYOR_BUILD_FOLDER\java-package\brainflow
          mvn package > mvn_final_stdout.txt
          cd $env:APPVEYOR_BUILD_FOLDER\tools
          .\github-release.exe release --user OpenBCI --repo brainflow --tag $env:APPVEYOR_REPO_TAG_NAME
          .\github-release.exe upload --user OpenBCI --repo brainflow --tag $env:APPVEYOR_REPO_TAG_NAME --name brainflow.jar --file $env:APPVEYOR_BUILD_FOLDER\java-package\brainflow\target\brainflow.jar
          .\github-release.exe upload --user OpenBCI --repo brainflow --tag $env:APPVEYOR_REPO_TAG_NAME --name brainflow-jar-with-dependencies.jar --file $env:APPVEYOR_BUILD_FOLDER\java-package\brainflow\target\brainflow-jar-with-dependencies.jar
        }
        Else {
          write-output "Failed to wait for mac and linux libs"
        }
      } Else {
        write-output "Skip deployment for non tag"
      }

on_finish:
  - appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build32\brainflow_build32_stdout.txt
  - appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\build64\brainflow_build64_stdout.txt
  - appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\GanglionBLEAPI\Mock\build\ganglion_mock_build64_stdout.txt
  - appveyor PushArtifact %APPVEYOR_BUILD_FOLDER%\java-package\brainflow\maven_package_stdout.txt

notifications:
  - provider: Email
    to:
      - '{{commitAuthorEmail}}'
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true
